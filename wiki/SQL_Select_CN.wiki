#summary SELECT 语法
#labels Phase-Implementation

{{{
SELECT ...
  FROM from_part
  [WHERE ...]
  [GROUP BY ...]
  [ORDER BY ...]
  [LIMIT offset , count]
}}}

_from_part_:
{{{
tbl_main_name [alias_name]
   [ LEFT JOIN tbl_name2 [alias_name2] ON tbl_main.colum_name = tbl2.colum_name ]
   ...
}}}

各部分含义:
  * select_expr - 返回值，字段名或<a href="http://code.google.com/p/flashdb/wiki/SQL_function_CN">sql函数</a>
    # 可使用AS指定返回的列名
    # 可使用 * 或 tbl.* 返回所有列
    # 支持分组聚合函数或字段结果函数
  * FROM - 检索的表
    # 第一张表为主表
    # 支持 LEFT JOIN , 但必须与主表关联，且仅支持单字段相等的关联关系
      # 有GROUP BY时，仅支持用分组字段进行关联
    # 不支持 INNER JOIN , 但很多情况下可以用 IN (SELECT ... FROM ...) 达到类似效果
    # 表可以指定别名，以便在该sql的其他部分使用
  * WHERE - 条件过滤
    # 未索引的字段，不可以进行检索
    # 支持常见的<a href="http://code.google.com/p/flashdb/wiki/SQL_Select_CN#WHERE_expression">条件表达式语法</a>
    # 支持过滤函数
  * GROUP BY - 分组计算
    # 仅支持单一字段分组，不支持多字段分组
    # 若返回分组字段，则该字段必须出现在SELECT部分的最前面
    # 分词字段或多值字段，每个词/值是单独各算一次的
  * ORDER BY - 结果排序
    # 支持多重排序，逗号间隔
    # 支持使用 DESC 按倒序排
    # 无GROUP BY时，支持排序函数
    # 有GROUP BY时，仅支持结果字段的排序
      # 聚合函数的结果，可使用结果列的别名进行排序。
  * LIMIT - 结果行数限制
    # 第一个值表示偏移行数，第二个值表示最多返回的行数
    # 只有一个值时，表示最多返回的行数

=== WHERE expression ===
  * 比较操作符: `= <> != > < >= <=`
    # 操作符左侧必须为字段名
    # 操作符右侧必须为sql常量或变量?
    # 字符串比较区分大小写
  * 布尔操作符: AND OR NOT
  * 空值判断: column_name IS NULL
  * IN查询:
    # 常量查询: column_name IN (value1, value2, ...)
    # 变量查询(仅用于JDBC编程执行): column_name IN ?
    # SELECT子查询: column_name IN (SELECT column_name2 FROM tbl_name2 ...)
  * 过滤函数
  * 支持括号嵌套，以改变表达式计算优先级